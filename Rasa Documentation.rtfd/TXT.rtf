{\rtf1\ansi\ansicpg1252\cocoartf1671
{\fonttbl\f0\froman\fcharset0 TimesNewRomanPS-BoldMT;\f1\froman\fcharset0 TimesNewRomanPSMT;\f2\froman\fcharset0 TimesNewRomanPS-ItalicMT;
\f3\froman\fcharset0 TimesNewRomanPS-BoldItalicMT;\f4\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww28600\viewh15280\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc\partightenfactor0

\f0\b\fs48 \cf0 BUILDING A CHATBOT USING RASA STACK\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 Why Rasa?
\fs28 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\sl264\slmult1\pardirnatural\partightenfactor0
\cf0                             	
\f1\b0 There are plenty of easy-to-use bot building frameworks developed by big companies like Google and Microsoft. For instance, 
\f0\b DialogueFlow
\f1\b0  which is developed by Google and 
\f0\b Bot Framework 
\f1\b0 developed by Microsoft. Both of them have custom language understanding modes. These frameworks seem to be great and useful when we don\'92t have any existing data to train the bot. However, In some situations or circumstances we may want to build a Chatbot whose user input must not be processed on servers that are owned by Google and Microsoft. For example, we may want a ChatBot for a business organization in which a bot receives a potentially sensitive and confidential information from users. In such case, we may feel comfortable to maintain all the components of Chatbot at our home. \
\
			This is where RASA platform comes in and makes things easier. It is an open source bot building framework. It doesn\'92t have any components on the server that we can call using an API. This means it will take more work to get it running. However, being incomplete control pf all the components of your chatbot is totally worth the time investment.\
\
\

\f0\b\fs36 RASA STACK
\fs28 \
\
			
\f1\b0 Rasa consists of two components Rasa 
\f0\b NLU
\f1\b0  and Rasa 
\f0\b CORE
\f1\b0 . Rasa NLU is responsible for 
\f2\i natural language understanding 
\f1\i0 of the chatbot. Its main purpose is, given an input sentence, It has to predict the 
\f2\i intent
\f1\i0  of that sentence, extract the 
\f2\i entities
\f1\i0  from the sentence such as age, date of birth. Intent dictates how the chatbot should respond to the input from the user. Entities are used to make responses more customized.\
\
			The second component, Rasa 
\f0\b CORE
\f1\b0 , the next component in Rasa Stack. It takes the structured input from Rasa 
\f0\b NLU
\f1\b0  or it takes the output produced by Rasa NLU and chooses which action bot should take using a probabilistic model like LSTM neural network.\
\
			The coolest thing about Rasa is every part of the stack is fully customizable and interchangeable. It is possible to use Rasa 
\f0\b CORE
\f1\b0  and Rasa 
\f0\b NLU
\f1\b0  separately and independently.\
\
\

\f0\b\fs36 Development Procedure\
\
	
\f1\b0\fs28 For developing this chatbot we are using python 3.x version
\f0\b \

\fs36 \
	
\fs32 Setting up Rasa NLU\
\
		
\f1\b0\fs28 The recommended way to install Rasa NLU is using pip:\
\
		command:  
\f0\b pip install rasa_nlu
\f1\b0 \
\

\f0\b Note:
\f1\b0  If you want to install packages of version 3.x use pip3 in the pip.\
\

\f0\b\fs32 	Installing Pipeline Dependencies\
\
		
\f1\b0\fs28 command:
\f0\b\fs32 \
				
\fs28 pip install rasa_nlu[spacy]\
				python -m spacy download en_core_web_md\
				python -m spacy link en_core_web_md en\
\

\f1\b0 This will install Rasa NLU as well as its language model for English language.\
\
\

\f0\b\fs32 Getting started with Rasa NLU\
\

\f1\b0\fs28 	We are developing a simple restaurant search chatbot here.\
\

\f0\b 1. Prepare your NLU Training Data\
\

\f1\b0 This data is just a list of messages that you expect to receive from user. They are annotated with intents and entities that NLU should learn to extract.\
\
Prepare the data in a file and save it as 
\f0\b nlu.md\
\

\f1\b0 sample data in 
\f0\b nlu.md
\f1\b0  file\
\
## intent:greet\
- hey\
- hello\
- hi\
- good morning\
- good evening\
- hey there\
\
## intent:restaurant_search\
- i'm looking for a place to eat\
- I want to grab lunch\
- I am searching for a dinner spot\
- i'm looking for a place in the [north](location) of town\
- show me [chinese](cuisine) restaurants\
- show me a [mexican](cuisine) place in the [centre](location)\
- i am looking for an [indian](cuisine) spot\
- search for restaurants\
- anywhere in the [west](location)\
- anywhere near [18328](location)\
- I am looking for [asian fusion](cuisine) food\
- I am looking a restaurant in [29432](location)\
\
## intent:thankyou\
- thanks!\
- thank you\
- thx\
- thanks very much\
\
\

\f0\b 2. Define your Machine learning Model\
\

\f1\b0 Rasa NLU has a number of different components, which together makes a pipeline. We have to create a configuration file and specify which pipeline we want to use. Here we are using pre-defined 
\f3\i\b tensorflow_embedding
\f1\i0\b0  pipeline
\f0\b \

\f1\b0 and save the file as \'93
\f0\b nlu_config.yml\'94
\f1\b0 .\
\

\f0\b nlu_config.yml
\f1\b0 \
\
language: en\
pipeline: tensorflow_embedding\
\

\f0\b 3. Train your Machine Learning NLU Model
\f1\b0 \
\
To train a model, start the rasa_nlu.train command, and tell it where to find the configuration file and training data.\
\
Use the following command to train the data.\
\

\f0\b python -m rasa_nlu.train -c nlu_config.yml --data nlu.md -o models --fixed_model_name nlu --project current --verbose\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f4\b0\fs24 \cf0 {{\NeXTGraphic Screen Shot 2018-11-26 at 1.37.47 PM.png \width28620 \height7680 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\f0\b\fs28 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\sl264\slmult1\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\b0 \cf0 If everything goes fine, you will see a message saying Finished training and successfully saved in to specified folder.\
\
\

\f0\b\fs32 Test Cases\

\f1\b0\fs28 \
Testing our model with different test cases.\
\
1. Lets test our trained model with message: 
\f0\b \'93Lets see some Italian restaurants\'94\
\
Result:\

\f4\b0\fs24 {{\NeXTGraphic Screen Shot 2018-11-26 at 1.46.37 PM.png \width26480 \height8400 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\f0\b\fs32 \

\fs28 \

\f1\b0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\sl264\slmult1\pardirnatural\partightenfactor0
\cf0 2. message: 
\f0\b \'93Mexican food near me\'94\
\
Result:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f4\b0\fs24 \cf0 {{\NeXTGraphic Screen Shot 2018-11-26 at 1.49.36 PM.png \width28700 \height8220 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\f0\b\fs28 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\sl264\slmult1\pardirnatural\partightenfactor0
\cf0 \
\

\f1\b0 3. message: 
\f0\b \'93Hello\'94\
Result:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f4\b0\fs24 \cf0 {{\NeXTGraphic Screen Shot 2018-11-26 at 1.52.20 PM.png \width28760 \height8000 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\f0\b\fs28 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\sl264\slmult1\pardirnatural\partightenfactor0

\f1\b0 \cf0 \

\f0\b \
\
\
\
}